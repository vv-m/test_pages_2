import React, {useState, useEffect} from 'react';
import {
    TextField,
    Box,
    Typography,
    Divider,
    FormControl,
    Button,
    InputLabel,
    Select,
    MenuItem,
} from '@mui/material';
import ProductCard from "./card_delivery";

export const alarmTextAir = "–í–µ—Å –ø—Ä–µ–≤—ã—à–µ–Ω\n (–¥–æ 50–∫–≥)"
// –¶–µ–Ω—ã –ñ–î
const priceRailwayForKG = 2.4  // USD –∑–∞ –∫–≥
const priceRailwayForCUB = 290  // USD –∑–∞ –∫–≥

// –¶–µ–Ω—ã –ê–≤—Ç–æ
const priceAutoForKG = 5.8  // USD –∑–∞ –∫–≥
const priceAutoForCUB = 440  // USD –∑–∞ –∫–≥

// –¶–µ–Ω–∞ –ê–≤–∏–∞
const priceAirForKG = 24  // USD –∑–∞ –∫–≥

// –ù–∞–¥–±–∞–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å –¶–ë
let markupCB = 4  // %
markupCB = (markupCB / 100) + 1

//
let railWay = {
    name: "–ñ/–î üöÇ",
    deliveryTime: "40-60"  // –¥–Ω–µ–π
}
let auto = {
    name: "–ê–≤—Ç–æ üöõ",
    deliveryTime: "20-40"  // –¥–Ω–µ–π
}
let air = {
    name: "–ê–≤–∏–∞ ‚úàÔ∏è",
    deliveryTime: "12-17"  // –¥–Ω–µ–π
}

function CalculatorForm() {
    const [weight, setWeight] = useState('');
    const [size1, setSize1] = useState('');
    const [size2, setSize2] = useState('');
    const [size3, setSize3] = useState('');
    const [currency, setCurrency] = useState('');
    const [usdValue, setUsdValue] = useState(0);
    const [rmbValue, setRmbValue] = useState(0);
    const [coast, setCoast] = useState('');
    const [coastOfItemByRUB, setCoastOfItemByRUB] = useState(0);
    const [resultByRailway, setResultByRailway] = useState('');
    const [resultByAuto, setResultByAuto] = useState('');
    const [resultByAir, setResultByAir] = useState('');


    const handleChange = (event, setter) => {
        const value = event.target.value.replace(/\D/g, ''); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        setter(value);
    };

    const calculateResult = () => {
        if (!weight || !size1 || !size2 || !size3 || !coast || !currency) {
            setResultByRailway('');
            setResultByAuto('');
            setResultByAir('');
            return;
        }

        let currentCurrencyValue = 0

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä
        if (currency === "USD") {
            currentCurrencyValue = usdValue * markupCB
        }

        if (currency === "RMB") {
            currentCurrencyValue = rmbValue * markupCB
        }

        // ======= –¢–û–í–ê–† =======

        // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        setCoastOfItemByRUB(Number(coast) * currentCurrencyValue)
        const volume = Number(size1) * Number(size2) * Number(size3) / 1000000
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ê–≤—Ç–æ((—Ü–µ–Ω–∞ –∑–∞ –∫—É–±) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö

        // ======= –ñ–î =======

        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ê–≤—Ç–æ(—Ü–µ–Ω–∞ –∑–∞ –∫–≥) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        const coastRailwayKG = Number(weight) * priceRailwayForKG * usdValue * markupCB + coastOfItemByRUB
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ê–≤—Ç–æ(—Ü–µ–Ω–∞ –∑–∞ –∫—É–±) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        const coastRailwayCUB = volume * priceRailwayForCUB * usdValue * markupCB + coastOfItemByRUB
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Ä–æ–∂–µ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞ –∫–≥ –∏–ª–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞ –∫—É–±—ã.
        let coastRailway = 0
        if (coastRailwayKG > coastRailwayCUB) {
            coastRailway = coastRailwayKG
        } else {
            coastRailway = coastRailwayCUB
        }

        // ======= –ê–í–¢–û =======

        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ñ–î(—Ü–µ–Ω–∞ –∑–∞ –∫–≥) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        const coastAutoKG = Number(weight) * priceAutoForKG * usdValue * markupCB + coastOfItemByRUB
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ñ–î(—Ü–µ–Ω–∞ –∑–∞ –∫—É–±) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        const coastAutoCUB = volume * priceAutoForCUB * usdValue * markupCB + coastOfItemByRUB
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Ä–æ–∂–µ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞ –∫–≥ –∏–ª–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞ –∫—É–±—ã.
        let coastAuto = 0
        if (coastAutoKG > coastAutoCUB) {
            coastAuto = coastAutoKG
        } else {
            coastAuto = coastAutoCUB
        }

        // ======= –ê–í–ò–ê =======
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ê–≤—Ç–æ(—Ü–µ–Ω–∞ –∑–∞ –∫–≥) + —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        let coastAir = Number(weight) * priceAirForKG * usdValue * markupCB + coastOfItemByRUB


        setResultByRailway(Math.round(coastRailway).toLocaleString('ru-RU'));
        setResultByAuto(Math.round(coastAuto).toLocaleString('ru-RU'));
        if (weight > 50) {
            setResultByAir(alarmTextAir)
        } else {
            setResultByAir(Math.round(coastAir).toLocaleString('ru-RU'));
        }

    };

    const clearFields = () => {
        setWeight(''); // –í–µ—Å
        setSize1(''); // –†–∞–∑–º–µ—Ä 1
        setSize2(''); // –†–∞–∑–º–µ—Ä 2
        setSize3(''); // –†–∞–∑–º–µ—Ä 3
        setCoast(''); // –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
        setCurrency(''); // –í–∞–ª—é—Ç–∞

        // setUsdValue(0);
        // setRmbValue(0);
        // setResultByRailway('');
    };


    useEffect(() => {
        fetch('https://www.cbr-xml-daily.ru/daily_utf8.xml')
            .then(response => response.text())
            .then(data => {
                const parser = new DOMParser();
                const xml = parser.parseFromString(data, "text/xml");
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã Valute.
                const valutes = xml.getElementsByTagName("Valute");
                for (let i = 0; i < valutes.length; i++) {
                    const charCode = valutes[i].getElementsByTagName("CharCode")[0].textContent;
                    if (charCode === "USD") {
                        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ.
                        let usdValueTMP = valutes[i].getElementsByTagName("Value")[0].textContent
                        let usd = parseFloat(usdValueTMP.replace(',', '.'));
                        setUsdValue(usd)
                    }
                    if (charCode === "CNY") {
                        let rmbValueTMP = valutes[i].getElementsByTagName("Value")[0].textContent
                        let rmb = parseFloat(rmbValueTMP.replace(',', '.'));
                        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ.
                        setRmbValue(rmb)
                    }
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            });
    }, []);

    useEffect(calculateResult, [weight, size1, size2, size3, currency, coast, coastOfItemByRUB, usdValue, rmbValue]);

    return (
        <Box
            sx={{
                // '& .MuiFormControl-root': { m: 1, minWidth: '300px' },
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                fontFamily: 'Play, sans-serif',
                marginTop: 5,
                minWidth: "250px"
            }}
            noValidate
            autoComplete="off"
        >

            <Box sx={{minWidth: "250px"}}>
                <Typography variant="h5" sx={{fontFamily: 'Play, sans-serif', marginBottom: 3}}>–†–∞—Å—á–µ—Ç
                    —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</Typography>
                <FormControl variant="outlined">
                    <TextField sx={{marginBottom: 2}}
                               size="small"
                               label="–í–µ—Å, –∫–≥"
                               variant="outlined"
                               value={weight}
                               onChange={(e) => handleChange(e, setWeight)}
                    />
                    <TextField sx={{marginBottom: 2}}
                               size="small"
                               label="–†–∞–∑–º–µ—Ä 1, —Å–º"
                               variant="outlined"
                               value={size1}
                               onChange={(e) => handleChange(e, setSize1)}
                    />
                    <TextField sx={{marginBottom: 2}}
                               size="small"
                               label="–†–∞–∑–º–µ—Ä 2, —Å–º"
                               variant="outlined"
                               value={size2}
                               onChange={(e) => handleChange(e, setSize2)}
                    />
                    <TextField sx={{marginBottom: 2}}
                               size="small"
                               label="–†–∞–∑–º–µ—Ä 3, —Å–º"
                               variant="outlined"
                               value={size3}
                               onChange={(e) => handleChange(e, setSize3)}
                    />
                    <TextField sx={{marginBottom: 2}}
                               size="small"
                               label="–¶–µ–Ω–∞"
                               variant="outlined"
                               value={coast}
                               onChange={(e) => handleChange(e, setCoast)}
                    />
                    <FormControl variant="outlined" sx={{marginBottom: 2}}>
                        <InputLabel size="small" id="currency-selector-label">–í–∞–ª—é—Ç–∞</InputLabel>
                        <Select
                            size="small"
                            labelId="currency-selector-label"
                            id="currency-selector"
                            value={currency}
                            label="–í–∞–ª—é—Ç–∞"
                            onChange={(e) => setCurrency(e.target.value)}
                        >
                            <MenuItem value="USD">USD</MenuItem>
                            <MenuItem value="RMB">RMB</MenuItem>
                        </Select>
                    </FormControl>
                    <Button variant="contained"
                            color="primary"s
                            onClick={clearFields}
                            sx={{
                                marginTop: 1,
                                fontFamily: 'Play, sans-serif',
                                width: '363px',
                                height: '56px'
                            }}>
                        –û—á–∏—Å—Ç–∏—Ç—å
                    </Button>
                    <Divider sx={{width: 'inherit', m: 2}}/>
                    <ProductCard name={railWay.name} deliveryTime={railWay.deliveryTime} price={resultByRailway}/>
                    <ProductCard name={auto.name} deliveryTime={auto.deliveryTime} price={resultByAuto}/>
                    <ProductCard name={air.name} deliveryTime={air.deliveryTime} price={resultByAir}/>

                </FormControl>
            </Box>
        </Box>
    );
}

export default CalculatorForm;
